@model Odev.ViewModels.AppointmentViewModel

<div class="container mt-5">
    <h2 class="text-center mb-4">Randevu Oluştur</h2>

    <form asp-action="Create" method="post" class="mt-4">
        <!-- Tarih ve Saat -->
        <div class="mb-3">
            <label for="Date" class="form-label">Tarih ve Saat</label>
            <input asp-for="Date" type="datetime-local" class="form-control" id="Date" required onchange="updateEmployeesAndServices()" />
            <span asp-validation-for="Date" class="text-danger"></span>
        </div>

        <!-- Servis Seçimi -->
        <div class="mb-3">
            <label for="ServiceIds" class="form-label">Servis Seç</label>
            <select id="ServiceIds" name="serviceIds" multiple class="form-select" required onchange="updateEmployeesAndServices()">
                @if (ViewData["Services"] is IEnumerable<Odev.Models.Service> services)
                {
                    foreach (var service in services)
                    {
                        <option value="@service.Id">@service.Name (@service.Duration dakika)</option>
                    }
                }
            </select>
        </div>

        <!-- Çalışan Seçimi -->
        <div class="mb-3">
            <label for="EmployeeId" class="form-label">Çalışan Seç</label>
            <select asp-for="EmployeeId" class="form-select" id="EmployeeId" required>
                <option value="">Çalışan Seçin</option>
                @if (ViewData["Employees"] is IEnumerable<Odev.Models.Employee> employees)
                {
                    foreach (var employee in employees)
                    {
                        <option value="@employee.Id" disabled>@employee.Name</option>
                    }
                }
            </select>
            <span asp-validation-for="EmployeeId" class="text-danger"></span>
        </div>

        <!-- Form Gönderme Butonu -->
        <button type="submit" class="btn btn-primary w-100 mt-4">Randevu Oluştur</button>
    </form>
</div>

<script>
    async function updateEmployeesAndServices() {
        const date = document.getElementById('Date').value;
        const serviceIds = Array.from(document.getElementById('ServiceIds').selectedOptions).map(option => option.value);

        if (date && serviceIds.length > 0) {
            // Çalışanları güncelle
            const response = await fetch(`/Appointment/GetAvailableEmployees?date=${date}&serviceIds=${serviceIds.join(',')}`);
            const employees = await response.json();

            const employeeSelect = document.getElementById('EmployeeId');
            employeeSelect.innerHTML = '';

            employees.forEach(employee => {
                const option = document.createElement('option');
                option.value = employee.id;
                option.textContent = `${employee.name} ${employee.isAvailable ? '' : '(Meşgul)'}`;
                option.disabled = !employee.isAvailable;
                employeeSelect.appendChild(option);
            });

            // Kullanıcı musaitlik kontrolü
            await updateUserAvailability();
        }
    }

    async function updateUserAvailability() {
        const date = document.getElementById('Date').value;
        const serviceIds = Array.from(document.getElementById('ServiceIds').selectedOptions).map(option => option.value);

        if (date && serviceIds.length > 0) {
            const response = await fetch(`/Appointment/CheckUserAvailability?date=${date}&serviceIds=${serviceIds.join(',')}`);
            const result = await response.json();

            if (!result.isAvailable) {
                alert('Seçilen tarih ve saat aralığında başka bir randevunuz bulunuyor.');
                document.getElementById('Date').value = ''; // Tarihi sıfırla
            }
        }
    }

    document.getElementById('Date').addEventListener('change', updateEmployeesAndServices);
    document.getElementById('ServiceIds').addEventListener('change', updateEmployeesAndServices);
</script>
